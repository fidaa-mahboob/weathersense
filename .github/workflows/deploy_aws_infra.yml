name: Deploy To AWS
run-name: Deploy weathersense app AWS infrastructure
on: 
  push:
    branches:
      -  main 
  pull_request:
    branches:
      -  main 

permissions:
  id-token: write 
  contents: read 
  pull-requests: write 

jobs:
  deploy_infra_aws:
    runs-on: ubuntu-latest
    defaults:
      run:
          shell: bash
          working-directory: ./terraform
    steps:
      -   name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v4
          with: 
            role-to-assume: ${{ secrets.AWS_ROLE }}
            aws-region: ${{ secrets.AWS_REGION }}
            role-session-name: oidc-github-role

      -   name: Check out code
          uses: actions/checkout@v4 

      -   name: Setup Terraform
          uses: hashicorp/setup-terraform@v3
          with:
            terraform_version: 1.4.6

      -   name: Terraform fmt
          id: fmt
          run: terraform fmt -check
          continue-on-error: true


      -   name: Terraform Init
          id: init
          env:
            AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
            AWS_BUCKET_KEY_NAME: ${{ secrets.AWS_BUCKET_KEY_NAME }}
          run: terraform init -backend-config="bucket=${AWS_BUCKET_NAME}" -backend-config="key=${AWS_BUCKET_KEY_NAME}" -backend-config="region=${AWS_REGION}"
      
      -   name: Terraform validate
          id: validate
          run: terraform validate

      -   name: Terraform Plan
          id: plan
          run: terraform plan -refresh=false -no-color
          if: github.event_name == 'pull_request'
          continue-on-error: true


      -   uses: actions/github-script@v7
          if: github.event_name == 'pull_request'
          env:
            PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
          with:
            github-token: ${{ secrets.TOKEN }}
            script: |
              const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
              #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
              #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
              <details><summary>Validation Output</summary>

              \`\`\`\n
              ${{ steps.validate.outputs.stdout }}
              \`\`\`

              </details>

              #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

              <details><summary>Show Plan</summary>

              \`\`\`\n
              ${process.env.PLAN}
              \`\`\`

              </details>

              *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })


      -   name: Terraform Plan Status
          if: steps.plan.outcome == 'failure'
          run: exit 1


      -   name: Install Node Packages
          run: npm i    

      -   name: Run Component Tests
          run: |
             CI=true npm run test

      -   name: Terraform Apply And Deploy To AWS
          if: github.ref == 'refs/heads/main' && github.event_name == 'push'
          run: | 
            terraform apply -auto-approve -input=false
            chmod 555 ../scripts/deploy.sh
            cd ..
            cd ./terraform
            npm run deploy

      